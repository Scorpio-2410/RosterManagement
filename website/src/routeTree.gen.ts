/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const AuthDashboardLazyImport = createFileRoute('/_auth/dashboard')()
const AuthUsersCreateLazyImport = createFileRoute('/_auth/users/create')()
const AuthRostersCreaterosterLazyImport = createFileRoute(
  '/_auth/rosters/createroster',
)()
const AuthLocationsSearchModifyLazyImport = createFileRoute(
  '/_auth/locations/search-modify',
)()
const AuthLocationsCreateLazyImport = createFileRoute(
  '/_auth/locations/create',
)()
const AuthUsersSearchModifyDeleteIndexLazyImport = createFileRoute(
  '/_auth/users/search-modify-delete/',
)()
const AuthRostersSearchrosterIndexLazyImport = createFileRoute(
  '/_auth/rosters/searchroster/',
)()
const AuthRostersSearchrosterIdLazyImport = createFileRoute(
  '/_auth/rosters/searchroster/$id',
)()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AuthDashboardLazyRoute = AuthDashboardLazyImport.update({
  path: '/dashboard',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/dashboard.lazy').then((d) => d.Route),
)

const AuthUsersCreateLazyRoute = AuthUsersCreateLazyImport.update({
  path: '/users/create',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/users/create.lazy').then((d) => d.Route),
)

const AuthRostersCreaterosterLazyRoute =
  AuthRostersCreaterosterLazyImport.update({
    path: '/rosters/createroster',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/rosters/createroster.lazy').then((d) => d.Route),
  )

const AuthLocationsSearchModifyLazyRoute =
  AuthLocationsSearchModifyLazyImport.update({
    path: '/locations/search-modify',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/locations/search-modify.lazy').then((d) => d.Route),
  )

const AuthLocationsCreateLazyRoute = AuthLocationsCreateLazyImport.update({
  path: '/locations/create',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth/locations/create.lazy').then((d) => d.Route),
)

const AuthUsersSearchModifyDeleteIndexLazyRoute =
  AuthUsersSearchModifyDeleteIndexLazyImport.update({
    path: '/users/search-modify-delete/',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/users/search-modify-delete.index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthRostersSearchrosterIndexLazyRoute =
  AuthRostersSearchrosterIndexLazyImport.update({
    path: '/rosters/searchroster/',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/rosters/searchroster.index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthRostersSearchrosterIdLazyRoute =
  AuthRostersSearchrosterIdLazyImport.update({
    path: '/rosters/searchroster/$id',
    getParentRoute: () => AuthRoute,
  } as any).lazy(() =>
    import('./routes/_auth/rosters/searchroster.$id.lazy').then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_auth/dashboard': {
      preLoaderRoute: typeof AuthDashboardLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/locations/create': {
      preLoaderRoute: typeof AuthLocationsCreateLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/locations/search-modify': {
      preLoaderRoute: typeof AuthLocationsSearchModifyLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/rosters/createroster': {
      preLoaderRoute: typeof AuthRostersCreaterosterLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/users/create': {
      preLoaderRoute: typeof AuthUsersCreateLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/rosters/searchroster/$id': {
      preLoaderRoute: typeof AuthRostersSearchrosterIdLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/rosters/searchroster/': {
      preLoaderRoute: typeof AuthRostersSearchrosterIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/users/search-modify-delete/': {
      preLoaderRoute: typeof AuthUsersSearchModifyDeleteIndexLazyImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren([
  IndexLazyRoute,
  AuthRoute.addChildren([
    AuthDashboardLazyRoute,
    AuthLocationsCreateLazyRoute,
    AuthLocationsSearchModifyLazyRoute,
    AuthRostersCreaterosterLazyRoute,
    AuthUsersCreateLazyRoute,
    AuthRostersSearchrosterIdLazyRoute,
    AuthRostersSearchrosterIndexLazyRoute,
    AuthUsersSearchModifyDeleteIndexLazyRoute,
  ]),
])

/* prettier-ignore-end */
